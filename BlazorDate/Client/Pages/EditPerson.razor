@page "/editperson"
@page "/editperson/{id:int}"
@inject IPersonService PersonService
@inject IGenderService GenderService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (person.Editing)
    {
        <h3>Edit "@person.Name"</h3>
    }
    else if (person.IsNew)
    {
        <h3>Create new profile</h3>
    }

    <EditForm Model="person" OnValidSubmit="AddOrUpdatePerson">
        <DataAnnotationsValidator />
        <div class="mb-0">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="person.Name" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="nick">Nick</label>
            <InputText id="nick" @bind-Value="person.Nick" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="profiletext">Profile Text</label>
            <InputTextArea id="profiletext" @bind-Value="person.ProfileText" class="form-control"></InputTextArea>
        </div>

        <div class="mb-3">
            <label for="gender">Gender</label>
            <InputSelect id="gender" @bind-Value=person.GenderId class="form-control form-select">
                @foreach (var gender in GenderService.Genders)
                {
                    <option value="@gender.Id">@gender.Name. <small>@gender.Description</small></option>
                }
            </InputSelect>
        </div>

        <div class="mb-0">
            @*   @if (!string.IsNullOrEmpty(person.))
        {
        <img src="@person.ImageUrl" />
        }*@

            @if (person.Pictures != null || person.Pictures.Count > 0)
            {
                @foreach (var picture in person.Pictures)
                {
                    <img src="@picture.Data" />
                    <button type="button" class="btn btn-sm" @onclick="(() => RemovePicture(picture.Id))">Remove</button>
                }
            }
        </div>
        <div class="mb-0">
            <label for="pictures">Pictures</label>
            <InputFile id="pictures" OnChange="OnFileChange" multiple class="form-control"></InputFile>
        </div>

        <button type="submit" class="btn btn-primary float-start m-3">@btnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>

    @if (!person.IsNew)
    {
        <button type="button" class="btn btn-danger float m-3" @onclick="DeletePerson">
            Delete profile
        </button>
    }
}



@code {

    [Parameter]
    public int Id { get; set; }

    Person person = new Person();
    //Gender gender = new Gender();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await PersonService.GetPerson(Id);
        await GenderService.GetGenders();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            person = new Person { IsNew = true };
            btnText = "Create Person";

        }
        else
        {
            Person dbPerson = (await PersonService.GetPerson(Id)).Data;
            if (dbPerson == null)
            {
                msg = $"Person with Id '{Id}' does not exist.";
                return;
            }
            person = dbPerson;
            person.Editing = true;
            btnText = "Update person";
        }
        loading = false;
    }

    async void AddOrUpdatePerson()
    {
        if (person.GenderId == null || person.GenderId == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You need to choose a gender before save!");
        }
        else
        {
            if (person.IsNew)
            {
                var result = await PersonService.CreatePerson(person);
                NavigationManager.NavigateTo($"person/{result.PersonId}");
            }
            else
            {
                person.IsNew = false;
                person = await PersonService.UpdatePerson(person);
                NavigationManager.NavigateTo($"person/{person.PersonId}", true);
            }
        }
    }

    async void DeletePerson()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Do you want to delete '{person.Name}'?");
        if (confirmed)
        {
            await PersonService.DeletePerson(person);
            NavigationManager.NavigateTo("/");
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var picture in e.GetMultipleFiles(8))
        {
            var resizedPicture = await picture.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedPicture.Size];
            await resizedPicture.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            person.Pictures.Add(new Picture { Data = imageData });
        }
    }

    void RemovePicture(int id)
    {
        var picture = person.Pictures.FirstOrDefault(p => p.Id == id);
        if (picture != null)
        {
            person.Pictures.Remove(picture);
        }
    }
}
