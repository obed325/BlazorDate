@page "/person"
@page "/person/{id:int}"
@inject IPersonService PersonService
@inject IGenderService GenderService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (person.Editing)
    {
        <h3>Edid "@person.Name"</h3>
    }
    else if (person.IsNew)
    {
        <h3>Create new profile</h3>
    }

    <EditForm Model="person" OnValidSubmit="AddOrUpdatePerson">
        <DataAnnotationsValidator />
        <div class="mb-0">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="person.Name" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="nick">Nick</label>
            <InputText id="name" @bind-Value="person.Nick" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="profiletext">Profile Text</label>
            <InputTextArea id="profileText" @bind-Value="person.ProfileText" class="form-control"></InputTextArea>
        </div>
        
        <div class="mb-3">
            <label for="gender">Gender</label>
            <InputSelect id="gender" @bind-Value=gender.Id class="form-control form-select">
                @foreach (var gender in GenderService.Genders)
                {
                    <option value="@gender.Id">@gender.Name</option>
                    <label>@gender.Description</label>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary float-start m-3">@btnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>

    @if (!person.IsNew)
    {
        <button type="button" class="btn btn-danger float m-3" @onclick="DeletePerson">
            Delete profile
        </button>
    }
}



@code {

    [Parameter]
    public int Id { get; set; }

    Person person = new Person();
    Gender gender = new Gender();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await PersonService.GetPerson(Id);
        await GenderService.GetGenders();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            person = new Person { IsNew = true };
            btnText = "Create Person";

        }
        else
        {
            Person dbPerson = (await PersonService.GetPerson(Id)).Data;
            if (dbPerson == null)
            {
                msg = $"Person with Id '{Id}' does not exist.";
                return;
            }
            person = dbPerson;
            person.Editing = true;
            btnText = "Update person";
        }
        loading = false;
    }

    async void AddOrUpdatePerson()
    {
        if (person.GenderId == null || person.GenderId== 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You need to choose a category before save!");
        }
        else
        {
            if (person.IsNew)
            {
                var result = await PersonService.CreatePerson(person);
                NavigationManager.NavigateTo($"person/{result.PersonId}");
            }
            else
            {
                person.IsNew = false;
                person = await PersonService.UpdatePerson(person);
                NavigationManager.NavigateTo($"admin/product/{person.PersonId}", true);
            }
        }
    }

    async void DeletePerson()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Do you want to delete '{person.Name}'?");
        if (confirmed)
        {
            await PersonService.DeletePerson(person);
            NavigationManager.NavigateTo("index");
        }
    }
}
