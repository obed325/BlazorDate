@page "/admin/adminseriousness"
@inject ISeriousnessService SeriousnessService
@inject NavigationManager NavigationManager
@implements IDisposable

<h3>Admin Seriousness</h3>

<div class="header">
    <div class="col">Level name</div>
    <div class="col"></div>
</div>

@foreach (var seriousness in SeriousnessService.Seriousnesses)
{
    @if (seriousness.Editing)
    {
        <EditForm Model="editingSeriousness" OnSubmit="UpdateSeriousness">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="editingSeriousness.Level" class="form-control"></InputText>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                    <button class="btn btn-primary" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col">
                @seriousness.Level
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="(() => EditSeriousness(seriousness))">
                    <i class="oi oi-pencil"></i>
                </button>
                <button class="btn btn-primary" @onclick="(() => DeleteSeriousness(seriousness.Id))">
                    <i class="oi oi-trash"></i>
                </button>
            </div>
        </div>
    }
}
<button class="btn btn-primary mt-2" @onclick="CreateNewSeriousness">
    <i class="oi oi-plus"></i>  Add new level
</button>

@code {
    Seriousness editingSeriousness = null;

    protected override async Task OnInitializedAsync()
    {
        await SeriousnessService.GetSeriousnesses();
        SeriousnessService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        SeriousnessService.OnChange -= StateHasChanged;
    }

    private void CreateNewSeriousness()
    {
        editingSeriousness = SeriousnessService.CreateNewSeriousness();
    }

    private void EditSeriousness(Seriousness seriousness)
    {
        seriousness.Editing = true;
        editingSeriousness = seriousness;
    }

    private async Task UpdateSeriousness()
    {
        if (editingSeriousness.IsNew)
            await SeriousnessService.AddSeriousness(editingSeriousness);
        else
            await SeriousnessService.UpdateSeriousness(editingSeriousness);
        editingSeriousness = new Seriousness();
    }

    private async Task CancelEditing()
    {
        editingSeriousness = new Seriousness();
        await SeriousnessService.GetSeriousnesses();
    }

    private async Task DeleteSeriousness(int id)
    {
        await SeriousnessService.DeleteSeriousness(id);
    }
}